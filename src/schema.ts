/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** Get all routes available for this apis */
    get: operations["get-root"];
    parameters: {};
  };
  "/authenticate": {
    /** A request to login with your username and password */
    post: operations["post-authenticate"];
  };
  "/projects": {};
  "/users/me": {
    get: operations["get-users-me"];
  };
  "/questions": {};
  "/attempts": {
    get: operations["get-attempts"];
    post: operations["post-attempts"];
  };
  "/attempts/{id}": {
    post: operations["post-attempts-id"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
}

export interface components {
  schemas: {
    /** Authentication */
    Authentication: {
      id: number;
      /** Format: email */
      email: string;
      role: string;
      name: string;
      picture?: string;
      token: string;
      iat?: number;
      exp?: number;
    };
    /** Error */
    Error: {
      message: string;
      code: number;
      error: boolean;
    };
    /** User */
    User: {
      username?: string;
      name?: string;
      surname?: string;
      /** Format: email */
      email?: string;
      /** Format: uri */
      image?: string;
      id?: number;
      wp_user_id?: number;
      role?: string;
      is_verified?: boolean;
    };
    /** Project */
    Project: {
      name?: string;
    };
    SelectQuestionSlug: string;
    TextQuestionSlug: string;
  };
  responses: {
    /** Example response */
    Error: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** A user */
    UserData: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    /** Authentication data. The token can be used to authenticate the protected requests */
    Authentication: {
      content: {
        "application/json": {
          id?: number;
          firstName?: string;
          lastName?: string;
          token?: string;
          username?: string;
          iat?: number;
          exp?: number;
        };
      };
    };
    /** An error due to the resource not existing */
    NotFound: {
      content: {
        "application/json": {
          element: string;
          id: number;
          message: string;
        };
      };
    };
    /** An error due to missing required parameters */
    MissingParameters: {
      content: {
        "application/json": {
          message: string;
        };
      };
    };
    /** An error due to insufficient authorization to access the resource */
    NotAuthorized: {
      content: {
        "application/json": {
          message?: string;
        };
      };
    };
  };
  parameters: {
    /** @description A campaign id */
    campaign: string;
    /** @description A task id */
    task: string;
    /** @description A customer id */
    customer: string;
    /** @description A project id */
    project: string;
    /** @description Max items to retrieve */
    limit: number;
    /** @description Items to skip for pagination */
    start: number;
    /** @description Key-value Array for item filtering */
    filterBy: { [key: string]: unknown };
    /** @description How to order values (ASC, DESC) */
    order: "ASC" | "DESC";
    /** @description How to localize values */
    locale: "en" | "it";
    /** @description A comma separated list of fields which will be searched */
    searchBy: string;
    /** @description The value to search for */
    search: string;
  };
}

export interface operations {
  /** Get all routes available for this apis */
  "get-root": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  /** A request to login with your username and password */
  "post-authenticate": {
    parameters: {};
    responses: {
      200: components["responses"]["Authentication"];
      /** Unauthorized */
      401: {
        content: {
          "application/json": string;
        };
      };
    };
    /** A JSON containing username and password */
    requestBody: {
      content: {
        "application/json": {
          username: string;
          password: string;
        };
      };
    };
  };
  "get-users-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          };
        };
      };
    };
  };
  "get-attempts": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            date: string;
            time: string;
            errors: number;
          }[];
        };
      };
    };
  };
  "post-attempts": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            /** Format: date-time */
            startTime: string;
            questions: ({
              title: string;
            } & (
              | {
                  /** @enum {string} */
                  type: "dropdown";
                  options: string[];
                  slug: components["schemas"]["SelectQuestionSlug"];
                }
              | {
                  /** @enum {string} */
                  type: "text";
                  slug: components["schemas"]["TextQuestionSlug"];
                }
            ))[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          code: string;
        };
      };
    };
  };
  "post-attempts-id": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            elapsedTime: string;
            success: boolean;
            wrongAnswers?: {
              slug:
                | components["schemas"]["SelectQuestionSlug"]
                | components["schemas"]["TextQuestionSlug"];
              yourAnswer: string;
              correctAnswer: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          slug: string;
          answer: string;
        }[];
      };
    };
  };
}

export interface external {}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** Get all routes available for this apis */
    get: operations["get-root"];
    parameters: {};
  };
  "/authenticate": {
    /** A request to login with your username and password */
    post: operations["post-authenticate"];
  };
  "/users/me": {
    /** Get logged user data */
    get: operations["get-users-me"];
  };
  "/attempts": {
    /** Get all attempts of logged user */
    get: operations["get-attempts"];
    /** Create a new attempt from a code */
    post: operations["post-attempts"];
  };
  "/attempts/{id}": {
    /** Complete an attempt with a list of answers */
    post: operations["post-attempts-id"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/events": {
    get: operations["get-events"];
    post: operations["post-events"];
  };
  "/events/{id}/attempt": {
    post: operations["post-events-id-attempt"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
}

export interface components {
  schemas: {
    SelectQuestionSlug: string;
    TextQuestionSlug: string;
    /** Event */
    Event: {
      id: number;
      title: string;
      start_date: string;
      end_date: string;
    };
  };
  responses: {
    /** Authentication data. The token can be used to authenticate the protected requests */
    Authentication: {
      content: {
        "application/json": {
          id?: number;
          firstName?: string;
          lastName?: string;
          token?: string;
          username?: string;
          iat?: number;
          exp?: number;
        };
      };
    };
    /** An error due to insufficient authorization to access the resource */
    NotAuthorized: {
      content: {
        "application/json": {
          message?: string;
        };
      };
    };
    /** Example response */
    Error: {
      content: {
        "application/json": {
          message: string;
          code: number;
          error: boolean;
        };
      };
    };
  };
  parameters: {};
}

export interface operations {
  /** Get all routes available for this apis */
  "get-root": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  /** A request to login with your username and password */
  "post-authenticate": {
    parameters: {};
    responses: {
      200: components["responses"]["Authentication"];
      401: components["responses"]["NotAuthorized"];
    };
    /** A JSON containing username and password */
    requestBody: {
      content: {
        "application/json": {
          username: string;
          password: string;
        };
      };
    };
  };
  /** Get logged user data */
  "get-users-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          };
        };
      };
    };
  };
  /** Get all attempts of logged user */
  "get-attempts": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            date: string;
            time: string;
            errors: number;
          }[];
        };
      };
    };
  };
  /** Create a new attempt from a code */
  "post-attempts": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            /** Format: date-time */
            startTime: string;
            questions: ({
              title: string;
            } & (
              | {
                  /** @enum {string} */
                  type: "dropdown";
                  options: string[];
                  slug: components["schemas"]["SelectQuestionSlug"];
                }
              | {
                  /** @enum {string} */
                  type: "text";
                  slug: components["schemas"]["TextQuestionSlug"];
                }
            ))[];
          };
        };
      };
      403: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          code: string;
        };
      };
    };
  };
  /** Complete an attempt with a list of answers */
  "post-attempts-id": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            elapsedTime: number;
            success: boolean;
            wrongAnswers?: {
              slug:
                | components["schemas"]["SelectQuestionSlug"]
                | components["schemas"]["TextQuestionSlug"];
              yourAnswer: string;
              correctAnswer: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          slug:
            | components["schemas"]["SelectQuestionSlug"]
            | components["schemas"]["TextQuestionSlug"];
          answer: string;
        }[];
      };
    };
  };
  "get-events": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
    };
  };
  "post-events": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          title: string;
          start_date: string;
          end_date: string;
        };
      };
    };
  };
  "post-events-id-attempt": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            /** Format: date-time */
            startTime: string;
            questions: ({
              title: string;
            } & (
              | {
                  /** @enum {string} */
                  type: "dropdown";
                  options: string[];
                  slug: components["schemas"]["SelectQuestionSlug"];
                }
              | {
                  /** @enum {string} */
                  type: "text";
                  slug: components["schemas"]["TextQuestionSlug"];
                }
            ))[];
          };
        };
      };
    };
  };
}

export interface external {}
